#!/bin/bash

time-between() {
# determine the hours, minutes, and seconds between the specified times

   _verify_reqs <<-EOF || return 1
   _print_var_vals
	EOF

   local start_time="${1}";
   local start_time_sec="$(date -d "${start_time}" +%s)"
   local end_time="${2:-now}";
   local end_time_sec="$(date -d "${end_time}" +%s)"
   local timediff
   local newer
   local older

   if [[ ${end_time_sec} -gt ${start_time_sec} ]]; then
      newer=${end_time_sec}
      older=${start_time_sec}
   else
      newer=${start_time_sec}
      older=${end_time_sec}
   fi

   timediff="$((newer - older))"
   _print_var_vals older newer timediff
   _calc_time_diff() {
      local timediff="${1?you must provide a timediff to \`${FUNCNAME}()\`}"
      local formula="${2?you must provide a formula to \`${FUNCNAME}()\`}"
      local value="$(echo "scale=20; ${timediff} ${formula}" | bc | sed -rne 's;^\.;0.;; s;^([0-9]+)(\.[0-9]+);\1 \2;p')";
      echo ${value}
   }

   local remainder
   local years
   local days
   local hours
   local minutes
   local seconds

   read years remainder < <(_calc_time_diff "${timediff}" "/ 60 / 60 / 24 / 365");
   _print_var_vals years remainder
   verbose 8 "years = '${years}'"
   verbose 8 "\${remainder} = '${remainder}'"

   read days remainder < <(_calc_time_diff "${remainder}" "* 365");
   _print_var_vals days remainder
   verbose 8 "days = '${days}'"
   verbose 8 "\${remainder} = '${remainder}'"

   # take the remainder of time after whole days (which inherently will be a
   # fraction) and multiply it back by 24
   # this should result in a whole number with a fraction
   read hours remainder < <(_calc_time_diff "${remainder}" "* 24")
   verbose 8 "hours = '${hours}'"
   verbose 8 "\${remainder} = '${remainder}'"

   # take the number of hours and multiply it by 60 to get the minutes
   read minutes remainder < <(_calc_time_diff "${remainder}" "* 60")
   verbose 8 "minutes = '${minutes}'"
   verbose 8 "\${remainder} = '${remainder}'"

   # take the remainder of time after whole days (which inherently will be a
   # fraction) and multiply it back by 24
   # this should result in a whole number with a fraction
   read seconds remainder < <(_calc_time_diff "${remainder}" "* 60")
   verbose 8 "seconds = '${seconds}'"
   verbose 8 "\${remainder} = '${remainder}'"


   _print_var_vals ${years} ${days} ${hours} ${minutes} ${seconds}

   local i
   local print_format
   local print_vars
   for i in years days hours minutes seconds; do
      [[ "${!i}" -gt 0 ]] && {
         print_format+="%d${i:0:1} "
         print_vars+="${!i} "
      }
   done
   _print_var_vals print_format print_vars
   printf "${print_format}\n" ${print_vars}
}
