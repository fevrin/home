#!/bin/bash

# security-related functions

hash_pw() {

   #<http://www.slashroot.in/how-are-passwords-stored-linux-understanding-hashing-shadow-utils>
   #<http://unix.stackexchange.com/questions/81240/manually-generate-password-for-etc-shadow>
   #$1 = MD5 hashing algorithm.
   #$2 =Blowfish Algorithm is in use.
   #$2a=eksblowfish Algorithm
   #$5 =SHA-256 Algorithm
   #$6 =SHA-512 Algorithm

   _verify_reqs <<-EOF || return 1
   openssl
   verbose
	EOF

   local help="\
   SYNOPSIS:
   hash_pw [password] [hash_type] [salt]

   hash_type      crypt = Unix
                  1     = MD5
                  apr1  = Apache variant MD5

   EXAMPLE:
   hash_pw testpass crypt testsalt"

   [[ ${1} =~ -(h|-?help) ]] && echo "${help}" && return

   local rand_string="$(tr -cd '[:graph:]' </dev/urandom | fold -w 12 | head -n1)"

   local salt=${3// /}
   local type=${2// /}
   local password=${1// /:-${rand_string}}

   salt=${salt:-${rand_string}}
   type=${type:-1}

   verbose 8 openssl passwd -${type} -salt ${salt} ${password}

   if [[ "${type}" == crypt ]]; then
      openssl passwd -${type} -salt ${salt} ${password}
   else
      openssl passwd -${type} ${password}
   fi
}

gen_pw() {

   _verify_reqs <<-EOF || return 1
   fold
	EOF

   OPTIND=1

   local help="\
   SYNOPSIS:
   gen_pw [-l length_of_password(s)] [number_of_passwords]

   -l             length of the password(s) generated. default is 12
   -n             number of passwords to generate. default is 1
   -t             character set to include (as supported by 'tr')
   -a             alphanumeric characters only

   EXAMPLE:
   ${FUNCNAME} 15 2
   "

   while getopts l:n:t:h opt; do
      case "${opt}" in
         l) local length="${OPTARG}";;
         n) local number="${OPTARG}";;
         t) local type="${OPTARG}";;
         h) echo "${help}"; return;;
      esac
   done

   [[ ${length} =~ ^[0-9]{1,20}$ ]] || length=12
   [[ ${type} =~ ^\[?:?[a-z]+:?\]?$ ]] || type="graph"
#   alnum
#   alpha
#   blank
#   cntrl
#   digit
#   graph
#   lower
#   print
#   punct
#   space
#   upper
#   xdigit
   number="${number:-1}"

   tr -cd "[:${type}:]" </dev/urandom | fold -w ${length} | head -n${number} | tr -d '\n'
}

get_ssl_cert() {

   _verify_reqs <<-EOF || return 1
   openssl
	EOF

   local host="${1}"

   [[ "${host}" =~ ${DOMAIN_REGEX} ]] || {
      echo "error: not a valid URL:"
      echo "${host}"
      return 1
   }

   host="${host/*:\/\//}"
   host="${host/\/*}"

   _print_var_vals host

   echo Q | openssl s_client -connect ${host}:443 | openssl x509 -noout -text
}

generate_luks_keyfile() {
   # from <https://github.com/thrdroom/ManualFullSystemEncryption/blob/master/encryptinstallation#L1165>

   local outfile="${1}"
   local count="${2:-1}"
   local bs="${3:-512}"

   if [[ "${outfile}" ]]; then
      if [[ -s "${outfile}" ]]; then
         echo -n "${outfile} exists. overwrite it? [y/N] "
         read
         if [[ "${REPLY}" =~ [Yy] ]]; then
            sudo dd if=/dev/urandom of="${outfile}" count="${count}" bs="${bs}"
         else
            echo "cancelling keyfile generation"
         fi
      else
         sudo dd if=/dev/urandom of="${outfile}" count="${count}" bs="${bs}"
      fi
   else
      echo "you must specify an output file!"
   fi
}

ssh_key_is_encrypted() {
   local file="${1}"

   [[ -r "${file}" ]] || {
      echo "error: file unreadable or doesn't exist: '${file}'"
      return 2
   }

   grep -iq encrypted "${file}" || {
      if head -n1 "${file}" | grep -iq openssh; then
         { tail -n+2 "${file}" | head -n-1 | base64 -d | strings | grep -iq bcrypt; } &&
            return 0
      else
         return 1
      fi
   }
}

format_external_luks_lvm() {
   # this expects one argument: the drive designation (e.g., sda)
   # nvme designations aren't yet supported

   local REPLY
   local drive="${1}"
   drive="${drive##/dev/}"
   declare -A drive_info=(
      [device]="/dev/$(echo "${drive}" | sed 's;[0-9]+$;;')"
      [path]="/dev/$(if [[ "${drive}" =~ [A-Za-z][0-9]$ ]]; then echo "${drive}"; else echo "${drive}1";fi)"
      [vendor]="$(if [[ -s /sys/block/${drive}/device/vendor ]]; then cat /sys/block/${drive}/device/vendor | sed -re 's; +$;;'; else echo 'unknown_vendor'; fi)"
      [model]="$(cat /sys/block/${drive}/device/model | sed -re 's; +$;;' -e 's; ;_;g')"
   )
   drive_info[size_actual]="$(lsblk --nodeps --noheadings --output SIZE "${drive_info[device]}" | tr -d ' ' | sed -re 's;$;B;')"
   drive_info[size]="$(echo "${drive_info[size_actual]}" | egrep -o '[0-9.]+' | awk '{ print int($1 + 0.5) }')$(echo "${drive_info[size_actual]}" | egrep -o '[A-Za-z]+$')"
   local keyfile_name
   local fs_label
   for i in vendor size model; do
      keyfile_name+="${drive_info[${i}],,}_"
   done
   keyfile_name="${keyfile_name%%_}"
   echo "${keyfile_name}"
   echo
   echo -n "is '${drive_info[path]}' the correct drive and partition? [y/N] "; read
   [[ ${REPLY} =~ [Yy] ]] || {
      echo "please re-run with the correct drive"
      return
   }
   echo -n "is the label '${keyfile_name}' ok to use? [y/N] "; read
   [[ ${REPLY} =~ [Yy] ]] || {
      echo -n "which name would you like to use instead? "; read
      keyfile_name="${REPLY}"
   }
   fs_label="${keyfile_name}"
   [[ ${#fs_label} -gt 16 ]] && fs_label="${drive_info[vendor],,}_${drive_info[size],,}"
   _print_var_vals drive_info[device] drive_info[vendor] drive_info[model] drive_info[size] keyfile_name
   echo "'${drive_info[device]}' '${drive_info[path]}''${drive_info[vendor]}' '${drive_info[model]}' '${drive_info[size]}' '${keyfile_name}'"

   # ensure sudo privileges are active
   sudo -v

   # unmount the drive if it's mounted
   grep -qs "${drive_info[path]}" /proc/mounts &&
      echo sudo umount "${drive_info[path]}" &&
      sudo umount "${drive_info[path]}"

   # close the mount if it's already encrypted
   local existing_map="$(sudo lsblk -lo NAME,PATH,PKNAME | awk "{ if (\$3 ~ /${drive_info[path]##*/}/) {print \$2} }")"
   echo sudo cryptsetup isLuks "${drive_info[path]}" &&
      echo sudo cryptsetup status "${existing_map}" &&
      echo sudo cryptsetup close "${existing_map}" &&
      echo sudo umount "${existing_map}"
   sudo cryptsetup isLuks "${drive_info[path]}" &>/dev/null &&
      sudo cryptsetup status "${existing_map}" &>/dev/null &&
      sudo cryptsetup close "${existing_map}" &&
      sudo umount "${existing_map}"

   # print the current partition table
   sudo sgdisk --print "${drive_info[device]}"
   echo
   echo -n "would you like to reformat the drive? [y/N] "; read
   [[ ${REPLY} =~ [Yy] ]] && {
      echo sudo sgdisk --zap-all "${drive_info[device]}" &&
      echo sudo sgdisk --new=1:0:0 "${drive_info[device]}" &&
      echo sudo sgdisk --typecode=1:8301 "${drive_info[device]}" &&
      echo sudo sgdisk --change-name=1:"${keyfile_name}" "${drive_info[device]}" &&
      echo sudo sgdisk --print "${drive_info[device]}"
      echo
      echo -n "does the new partition table look correct? [y/N] "; read
      [[ ${REPLY} =~ [Yy] ]] || {
         echo "please manually correct the partition table with \`sgdisk\`"
         echo "exiting..."
         return 1
      }
   }
#   generate_luks_keyfile /etc/"${keyfile_name}"
   echo -n "ready to encrypt the drive? [y/N] "; read
   [[ ${REPLY} =~ [Yy] ]] && {
      echo sudo cryptsetup luksFormat --verbose --verify-passphrase --type=luks2 "${drive_info[path]}" &&
      sudo cryptsetup luksFormat --verbose --verify-passphrase --type=luks2 "${drive_info[path]}" &&
      echo cryptsetup open --verbose --type=luks2 "${drive_info[path]}" "${keyfile_name}" &&
      cryptsetup open --verbose --type=luks2 "${drive_info[path]}" "${keyfile_name}" &&
      echo cryptsetup luksDump "${drive_info[path]}" &&
      cryptsetup luksDump "${drive_info[path]}" &&
      #   sudo cryptsetup luksAddKey "${drive_info[path]}" /etc/crypt."${keyfile_name}"
      #   sudo chown "${USER}" /etc/crypt."${keyfile_name}"
      #   sudo cryptsetup luksHeaderBackup "${drive_info[path]}" --header-backup-file=/etc/crypt."${keyfile_name}".header
      #   echo "${keyfile_name} UUID=$(blkid -o value -s PARTUUID ${drive_info[path]}) /etc/crypt.${keyfile_name} luks,discard,noearly" #   >>/etc/crypttab
      #   echo pvcreate /dev/mapper/"${keyfile_name}"
      #   echo vgcreate "${keyfile_name}-vg" /dev/mapper/"${keyfile_name}"
      #   echo lvcreate -L 100%FREE -n "${keyfile_name}-lv" "${keyfile_name}-vg"
      echo mkfs.ext4 -vL "${fs_label}" /dev/mapper/"${keyfile_name}" &&
      mkfs.ext4 -vL "${fs_label}" /dev/mapper/"${keyfile_name}" &&
      echo udisksctl mount -b /dev/mapper/"${keyfile_name}" /media/${USER}/"${keyfile_name}" &&
      udisksctl mount -b /dev/mapper/"${keyfile_name}" /media/${USER}/"${keyfile_name}"
#      sudo cryptsetup close --verbose "${keyfile_name}"
#      sudo cryptsetup unlock -b "${drive_info[path]}"
   }
}
