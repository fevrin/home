#!/usr/bin/env bash

has() {
   command -v -- "${1}" &>/dev/null
}

is_zsh() {
   [[ "${SHELL_TYPE}" =~ ^zsh$ ]]
}

if grep -q deep /sys/power/mem_sleep; then
   if ! (grep -q '\[deep\]' /sys/power/mem_sleep); then
      echo deep | sudo tee /sys/power/mem_sleep
   fi

   if ! (grep -q '\[deep\]' /sys/power/mem_sleep); then
      cat <<-EOF
		deep sleep not currently configured!

		configure deep sleep by adding this line to the kernel command in the grub configuration:
		mem_sleep_default=deep

		you can run this command to set it until the next boot:

		   echo deep | sudo tee /sys/power/mem_sleep

		for convenience, you can also set this in /etc/sudoers to be able to run the above without needing a password:

		   %sudo ALL=NOPASSWD: /usr/bin/tee /sys/power/mem_sleep

		EOF
   fi
fi

# output the following messages only on my local computer, not on servers
if [[ -z "${SSH_CLIENT}" && -n "${DISPLAY}" ]]; then
   # for LFS use (as recommended by <http://www.linuxfromscratch.org/hints/downloads/files/lfs_next_to_existing_systems.txt>
   export LFS=/mnt/lfs
#   echo don\'t forget to execute: sudo mount --bind /media/programs/linux_from_scratch "${LFS}"
#   echo

   #remove the right alt hotkey behavior in unity
   [[ -x /usr/bin/xmodmap ]] && /usr/bin/xmodmap -e 'remove mod1 = Alt_R'

   #process the Apple keyboard mod if using an Apple keyboard
   # this adds a noticeable lag time when sourcing in a new terminal
   ${HOME}/.apple_keyboard_mod.rc force
fi

# print out the todo list
if [[ -f ~/.todo && -s ~/.todo ]]; then
   echo
   echo 'things to do:'
   cat ~/.todo
fi

# enable color support of ls and also add handy aliases
if [[ "${TERM}" != "dumb" && "${TERM_PROGRAM}" != "Apple_Terminal" && ! "${TERM_PROGRAM}" =~ iTerm ]]; then
   eval "`dircolors -b`"
fi

# start a terminal multiplexer upon login only if there isn't already one opened and there are no detached sessions
SHLVL_threshold=1
# always use just "screen" as the terminal so servers don't go ballistic
# ugh, `export TERM=screen` causes weird stuff on the local machine, like italicizing text instead of highlighting it when copying using screen's
# commands
#export TERM=screen
if has tmux; then
   TMUX_LIST=$(tmux ls 2>/dev/null)
   if [[
      ! ${TERM} =~ tmux-256color && # we're not currently in a tmux session
                           # (tmux sets ${TERM} to "tmux-256color", per ~/.tmux.conf
      $(env | sed -n "s;SHLVL=\([0-9][0-9]*\);\1;p") -le ${SHLVL_threshold} # we're in the main bash instance (not nested)
   ]]; then

      if [[ -n "${TMUX_LIST}" && $(echo "${TMUX_LIST}" | grep -cvi attached) -ne 0 ]]; then
         if [[ $(echo "${TMUX_LIST}" | grep -cvi attached) -eq 1 ]]; then
            # there's just one session, so attach to it
            tmux attach
         else
            # list detached tmux instances, if any, to explain why tmux wasn't started
            cat <<-EOF
					can't start tmux due to these detached sessions:
					$(echo "${TMUX_LIST}" | grep -vi attached)
				EOF
         fi
      else
         # there are no tmux sessions or at least no detached tmux sessions, so start tmux
         #tmux new-session 'tmux new-window top && tmux new-window'
         TOP_CMD="$(which htop 2>/dev/null || which top 2>/dev/null)"
         tmux new-session -d -s default "${TOP_CMD}" &&
         tmux new-window -t default -n work &&
         tmux attach -t default

         # this command would otherwise result in the following error if in ~/.tmux.conf since tmux seems to read and execute the conf file in full
         # before creating a session:
         # .tmux.conf:117: no current target
         # more info at <https://superuser.com/questions/1413870/tmux-conf-doesnt-work-when-starting-but-does-with-source-file/1414127#1414127>
         tmux new-window top
      fi
   fi
   unset TMUX_LIST
else
   SCREEN_LIST=$(screen -ls)
   [[ ! ${TERM} =~ screen &&
      $(env | sed -n "s;SHLVL=\([1-9][1-9]*\);\1;p") = ${SHLVL_threshold} &&
      ! $(echo "${SCREEN_LIST}" | grep -i detached)
   ]] && {
      screen
   }

   # list detached screens, if any, to explain why screen wasn't started
   [[ $(echo "${SCREEN_LIST}" | grep -i detached) ]] && echo "${SCREEN_LIST}"
   unset SCREEN_LIST
fi

[[ "${TERM_PROGRAM}" =~ ^tmux ]] && {
   # FIXME: fix for slow vim startup in tmux
   SESSION_PID=$(ls -1tr /tmp/.ICE-unix/ | tail -n1)
   export SESSION_MANAGER="local/${HOSTNAME}:@/tmp/.ICE-unix/${SESSION_PID},unix/${HOSTNAME}:/tmp/.ICE-unix/${SESSION_PID}"
}

# read in latest bash history.  for some reason, this must come last (or at least after the "shopt" line);
# otherwise, the timestamps in ~/.bash_history are also considered commands
#history -n

# use vi-keybindings
set -o vi

grep -q 10 /proc/sys/vm/swappiness || {
   sudo sysctl vm.swappiness=10
   SOURCE="${BASH_SOURCE}"
   # shellcheck disable=SC2296
   is_zsh && SOURCE="${(%):-%x}"
   cat <<-EOF | sudo tee /etc/sysctl.d/local-swappiness.conf &>/dev/null
		# set via $([[ -L "${SOURCE}" ]] && readlink "${SOURCE}" || echo "${SOURCE}")
		vm.swappiness = 10
	EOF
}
