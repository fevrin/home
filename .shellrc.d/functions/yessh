#!/bin/bash

yessh() {

   # handy for ssh'ing into servers and getting some common basic environmental modifications without having to copy ~/.bashrc, ~/.bash_aliases, etc.
   # to each server first; it's all done over one connection, if possible
   # inspired by <https://superuser.com/a/503785>

   # input: server name and optional arguments passed to 'ssh'
   # output: connects to the specific node and sets up the environment contained in the ~/.shellrc.d/remote/* files

   # examples:
   # yessh reg1node22
   # yessh reg1node22 'cat /proc/cmdline'

   # any files or symlinks in the ~/.shellrc.d/remote/ directory will be passed as-is from the local to the remote host as if they were the contents
   # of .bashrc

   # they should be directly executable by bash on the remote host

   # they will not be sourced or evaluated on the local host

   # to define functions available locally on the remote host, you can run a
   # command like this to combine existing functions into a single file
   # just replace the paths, as needed:
   # cat ~/.shellrc.d/functions/* >~/.shellrc.d/remote/functions

   _verify_reqs <<-EOF || return 1
   base64
   bzip2
   rsync
   ssh
   verbose
	EOF

   local hostname
   local port
   local username
   local ssh_args
   local orig_command
   local command
   local COPY_CONFIG
   local KEEP_CONFIG

   if [[ $# -gt 1 ]]; then
      while [[ $# -ge 1 ]]; do
         local arg="$1"
         verbose 8 "arg = $arg"
         verbose 8 "\$* = '$*'"
         case $arg in
            -p|--port)
               shift
               port="$1"
               ;;
            *@*)
               if [[ "$arg" =~ $DOMAIN_REGEX$ ]]; then
                  username="$(echo "$arg" | cut -d@ -f1)"
                  hostname="$(echo "$arg" | cut -d@ -f2)"
               fi
               ;;
            --copy-config)
                  COPY_CONFIG=1
               ;;
            --keep-config)
                  KEEP_CONFIG=1
               ;;
            -*)
               if [[ "$arg" =~ -[46AaCfGgKkMNnqsTtVvXxYy]+ ]]; then
                  ssh_args="$ssh_args $arg"
               else
                  ssh_args="$ssh_args $arg"
                  shift
                  ssh_args="$ssh_args $1"
               fi
               ;;
            *)
               if [[ -z "$hostname" ]]; then
                  [[ "$arg" =~ $DOMAIN_REGEX$ || "$arg" =~ $IP_REGEX$ ]] && hostname="$arg"
               else
                  # the last argument(s) should be the command, like with the ssh client
                  orig_command="$@"
                  break
               fi
               ;;
         esac
         shift

         _print_var_vals \
         hostname \
         port \
         username \
         ssh_args \
         orig_command
         verbose 8
      done
   else
      if [[ "$1" =~ .*@.* ]]; then
         username="$(echo "$1" | cut -d@ -f1)"
         hostname="$(echo "$1" | cut -d@ -f2)"
      else
         hostname="$1"
      fi
   fi

   port="${port:-22}"
   username="${username:-$USER}"

   verbose 8 "final hostname = $hostname"
   verbose 8 "final port = $port"
   verbose 8 "final username = $username"
   verbose 8 "final ssh_args = $ssh_args"
   verbose 8 "final orig_command = $orig_command"
   verbose 8 "final COPY_CONFIG = '$COPY_CONFIG'"

   if [[ "$hostname" ]]; then
      [[ -d "$HOME/.shellrc.d" ]] ||
         verbose "$HOME/.shellrc.d doesn't exist!"

      # inspired by <https://superuser.com/a/1078431>
      local bashrc_contents="$(
         ls -1 ~/.shellrc.d/remote/* 2>/dev/null |
            grep -v \.md$ | # do not include markdown files
            xargs cat |
            egrep -v '^ +#' | # remove all commented lines
            bzip2 |
            base64 -w0
      )"

      if [[ $(echo "$bashrc_contents" | wc -c) -le 20480 && "${COPY_CONFIG}" -ne 1 ]]; then
         read -r -d '' command <<-EOF
            bash --rcfile <(
               which bunzip2 &>/dev/null || {
                  which yum &>/dev/null &&
                     echo "echo \"installing bzip2...\"" &&
                     yum install -qy bzip2 &>/dev/null;
               };
               echo "$bashrc_contents" | base64 --decode | bunzip2
            )
			EOF
      else
         # ssh will complain the argument list is too long, so there's no way around just uploading the files to temporary files

         verbose 1 "copying rc content as a file due to its size ($(echo "$bashrc_contents" | wc -c))"

         # generate a temp file name
         local tempbashrc="$(mktemp /tmp/tmp.XXXXXXXXXX)"
         # workaround for use on Mac OS X, which has no option for a dry run
         [[ -f "$tempbashrc" ]] && rm -f "$tempbashrc"
         echo "$bashrc_contents" >"$tempbashrc"

         # copy the temporary bashrc file to the remote host, then delete it locally
         rsync -avzPi -e "ssh -p $port" "$tempbashrc" ${username}@${hostname}:"$tempbashrc"
         [[ "${KEEP_CONFIG}" -eq 1 ]] || rm -fv "$tempbashrc"
         #scp -P $port "$tempbashrc" ${username}@${hostname}:"$tempbashrc"

         command="bash --rcfile <(cat '$tempbashrc' | base64 --decode | bunzip2)"
      fi

         # inspired by <https://superuser.com/questions/671372/running-command-in-new-bash-shell-with-rcfile-and-c/671488#671488>
         # necessary mess to mark just the output of the command (not any rcfile output)
         # then decode it once the last sed is given the entire output
         # \o2 = \n
         # \03 = start of output
         # those numbers are arbitrary but not likely to occur in typical output
         [[ -n "$orig_command" ]] &&
         orig_command="$(printf '%q' "$orig_command")" &&
         _print_var_vals orig_command &&
         command="$command -ic ${orig_command}\" |
         tr '\n' '\2' |                         # convert all newlines to octal #2 so the output is a single line
         sed -re 's;^;\o3;'\" |                 # insert an octal #3 at the beginning of the command output's one line
         sed -rne 's;.*\o3;;' -e 's;\o2;\n;gp'" # now with the command's output alongside any other output from the rcfile, delete everything before
                                                # the command output marker (octal #3) and convert back all octal #2s to newlines

      [[ $(echo "$bashrc_contents" | wc -c) -le 20480 && "${COPY_CONFIG}" -ne 1 ]] || command="$command; rm '$tempbashrc'"

      verbose 8 ssh -qt -p $port $ssh_args ${username}@${hostname} "$command"
      ssh -qt -p $port $ssh_args ${username}@${hostname} "$command"
   else
      echo "you must specify a host!"
   fi
}
