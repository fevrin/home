#!/bin/bash

# format is: alias NICKNAME='full command'
# you may have to restart any open terminals for the changes to take effect

# always run rm interactively, so as to not accidentally remove an object
alias rm='rm -i'

# always list the size in human-readable format
alias df='df --print-type --human-readable --portability --total'

alias du='du --all --total --human-readable'

alias free='free --total'

# lists many info of almost all files in current directory
alias ll='ls -Al'

# lists all entries in current directory in human-readable block sizes, long format, and with executable and directory designations
alias list='ls -halF --color=auto'

# same as "list", but doesn't list all
alias lst='ls -hlF'

# be verbose when making links
alias ln='ln -v'

# show the progress of the copy
alias cp='cp -v'

# show the progress of the move
alias mv='mv -v'

# get the sha-256 hash of the current directory
alias hashd='tar cf - ./ | sha256sum'

# see if there are any package updates
alias aptgrade='sudo apt-get update && sudo apt-get upgrade'

# show all known information on a given package
alias aptshow='apt-cache show'

# search all repositories for a given package
alias aptsearch='apt-cache search'

# view a specified package's changelog
alias aptchangelog='apt-get changelog'

# install specified packages
alias aptinstall='sudo apt-get install'

# see if specified packages are installed or not
alias packstat='dpkg-query -s'

# go back to the previous working directory
alias goback='cd ~-'

# show each directory on its own line, and don't replace the home directory with ~
alias dir='dir -v -l'

# show the process id of processes
alias jobs='jobs -l'

# always grep recursively
#alias grep='grep -r'

# color grep output by default
alias grep='grep --color=auto '

# use the `grep` alias defaults for egrep
alias egrep='grep -E '

# always create parent directories if they do not exist already
alias mkdir='mkdir -p'

# have qrencode take standard input
# OMG this caused me so much headache before I realized I'd aliased this a while ago >_<
#alias qrencode='qrencode -o /tmp/$$.png && eog /tmp/$$.png'
#'temp_file=/tmp/temp_ssh_key && { [[ -r ${temp_file} ]] || touch ${temp_file} && chmod 600 ${temp_file}; } && cat /media/${USER}-1gb/key >${temp_file} && ssh-add ${temp_file} && rm -f ${temp_file}'

# for connecting to a remote desktop
alias wconnect='vncviewer -truecolor -depth 24 -compresslevel 9 -quality 9 10.110.0.197:5900 && sshfs ${USER@10}.110.0.197:/ /tmp/casper'
alias wdisconnect='pkill vncviewer && sudo umount /tmp/casper'

# to easily upload standard config files to a new server
alias up-config='rsync -avzPiR ~/./.{{bash,input,screen,top,vim}rc,bash_aliases,profile,my.cnf,ssh/key.pub}'

alias nmap='nmap -T5 --reason -F -Pn'

alias mtr='sudo mtr -s 1472 -i.1 -c1000'

# more easily check customer droplets for ssh connectivity without having to deal with host key checks
#alias sshc='ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -l root'
alias sftpc='sftp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o User=root'

alias grep-config='grep -Ev "^(\s*|#.*|\s*#.*)$"'

# easier editing of ~/.bash_history when it's chattr'ed to prevent anything but appending
#actually, this may not work if there are changes to the live file when editing the temp copy :(
# shopt -s histappend replaces the chattr modifications
# "history -a; ... history -c; history -r should append to the history file the current shell's commands that haven't already been written to it, then once done editing, replace the current in-memory history list with what's in the file
# add something like these lines to a file in /etc/sudoers.d/ if you want to avoid having to sudo every time (use a username instead of '%sudo' to enable just one user to do this, and replace ${HOME} with the hard-coded version since sudo doesn't support ${HOME})
# %sudo   ALL=(ALL:ALL)NOPASSWD: /usr/bin/chattr -a ${HOME}/.bash_history
# %sudo   ALL=(ALL:ALL)NOPASSWD: /usr/bin/chattr +a ${HOME}/.bash_history
if [[ "${SHELL}" =~ zsh$ || "${SHELL_TYPE}" =~ ^zsh$ ]]; then
   alias edit-history='fc -IA; vim -c "+normal G" "${HISTFILE}"; ORIG_HISTSIZE="${HISTSIZE}"; HISTSIZE=0; HISTSIZE="${ORIG_HISTSIZE}"; fc -IR'
else
   alias edit-history='history -a; vim -c "+normal G" ${HISTFILE}; history -c; history -r'
fi
alias eh='edit-history'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
#alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

alias parse-json='python -mjson.tool'

# output apt history in a more readable format
alias apt-history='sed -re "s;\), ([a-z]);)\n\1;g" -e "s;^(Install|Upgrade): ;\1:\n;" /var/log/apt/history.log'

# from <https://unix.stackexchange.com/questions/152299/how-to-get-memory-usedram-used-using-linux-command/152301#152301>
# this is obsolete in procps version >3.3.9.9, which shows an "available" column:
# <https://bugzilla.redhat.com/show_bug.cgi?id=1158828>
alias calculate-free-mem='free | awk '\''FNR == 3 {printf "%0.2f%%\n",$4/($3+$4)*100}'\'''
alias calculate-used-mem='free | awk '\''FNR == 3 {printf "%0.2f%%\n",$3/($3+$4)*100}'\'''

# make the output of 'dirs' more readable
alias dirs='dirs -v'

# number the lines of a file on standard output
alias num-file='nl -bp -w3'

if [[ ${TMUX} =~ (tmate|tmux) ]]; then
   alias tsm='tmate show-messages'
else
   alias tsm='echo "this alias works only when run in a tmate session!"'
fi

##########################################################
######## Directory Shortcuts ########
#####################################

alias pics='pushd "${HOME}/pictures"'

alias movs='pushd "${HOME}/movies"'

alias docs='pushd "${HOME}/documents"'

alias progs='pushd "${HOME}/programs"'

##########################################################

# per the code here, we have to use CLICOLOR_FORCE="0" to disable color:
# https://github.com/cli/go-gh/blob/7adca2a0702063e9dad0683f24e9a64d0c5ee6d9/pkg/term/env.go#L165-L167
#
# would be nice if the documentation itself mentioned this...
if gh extension list | grep -q gh-poi; then
   alias poi='CLICOLOR_FORCE="0" gh poi'
fi

##########################################################
######## k8s ########
#####################

alias kubectl='k'
alias kdev='export KUBECONFIG=${HOME}/.kube/dev_config; board-starship k8s-dev; if ! (vpn-list | grep -q "Client connected"); then vpn-start; fi'
alias kprod='export KUBECONFIG=${HOME}/.kube/main_config; board-starship k8s-prod'
alias kend='unset KUBECONFIG; if (vpn-list | grep -q "Client connected"); then vpn-stop; fi; board-starship main'

alias kcc='k config get-contexts | awk "NR==1{print \$2\"\t\"\$3\"\t\"\$5};{ if(\$1 ~ /\*/){print \$2\"\t\"\$3\"\t\"\$5} }" | column -t'

# inspired by <https://kubernetes.io/docs/reference/kubectl/cheatsheet/>
alias kcv='if has kubecolor; then k config view | yq -C | less; else k config view; fi'
alias kgn='k get namespaces'

##########################################################

##########################################################
######## VPN ########
#####################

alias vpn-start='if has openvpn3; then echo openvpn3 session-start --config ~/.config/openvpn3/vpn.ovpn; openvpn3 session-start --config ~/.config/openvpn3/vpn.ovpn; else echo "${BOLD}${RED}error:${END_COLOR} \"openvpn3\" not found"; fi'

alias vpn-list='if has openvpn3; then { echo openvpn3 sessions-list; openvpn3 sessions-list; }; else echo "${BOLD}${RED}error:${END_COLOR} \"openvpn3\" not found"; fi'

alias vpn-stop='if has openvpn3; then for session_path in $(openvpn3 sessions-list | awk "{ if(\$0 ~ /Path:/){print \$2} else if(\$0 ~ /No sessions available/){print \"none\"} }"); do if [[ "${session_path}" =~ ^none$ ]]; then echo "No sessions available"; else echo openvpn3 session-manage --disconnect --session-path ${session_path}; openvpn3 session-manage --disconnect --session-path "${session_path}"; fi; done; echo openvpn3 session-manage --cleanup; openvpn3 session-manage --cleanup; unset session_path; else echo "${BOLD}${RED}error:${END_COLOR} \"openvpn3\" not found"; fi'

alias vpn-reset='if has openvpn3; then session_path="$(openvpn3 sessions-list | awk "{ if(\$0 ~ /Path:/){print \$2} else if(\$0 ~ /No sessions available/){print \"none\"} }")"; if [[ $(echo "${session_path}" | wc -l) -eq 0 ]]; then vpn-start; elif [[ $(echo "${session_path}" | wc -l) -eq 1 ]]; then echo openvpn3 session-manage --restart --path "${session_path}"; openvpn3 session-manage --restart --path "${session_path}"; else vpn-stop && vpn-start; fi; unset session_path; else echo "${BOLD}${RED}error:${END_COLOR} \"openvpn3\" not found"; fi'

##########################################################
